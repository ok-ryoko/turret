# Copyright 2023 OK Ryoko
# SPDX-License-Identifier: Apache-2.0

MAKEFLAGS += --warn-undefined-variables
SHELL := /bin/sh
.SHELLFLAGS := -euc
.DEFAULT_GOAL := help
.SUFFIXES:

GIT := git
GO := go

INTERACTIVE := $(shell [ -t 0 ] && echo 1)

.PHONY: all #? Format, check and compile all Go code
all: fmt check build

.PHONY: setup #? Prepare the development environment
setup:
ifdef INTERACTIVE
	$(GIT) config --local core.hooksPath .githooks
	$(GO) install golang.org/x/tools/cmd/goimports@v0.11.0
endif
	$(GO) install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.53.3

.PHONY: build #? Compile the principal binary from Go code
build:
	$(GO) build -o ./build/ ./cmd/turret/

.PHONY: check #? Assert that all Go code satisfies quality standards
check: lint

LINTER := $(shell command -v golangci-lint 2> /dev/null)

.PHONY: lint #? Perform static analysis of all Go code
lint:
ifndef LINTER
    $(error 'missing golangci-lint')
endif
	golangci-lint run

FORMATTER := $(shell command -v goimports 2> /dev/null)

.PHONY: fmt #? Format all Go code
fmt:
ifndef FORMATTER
    $(error 'missing goimports')
endif
	goimports -l -w ./

.PHONY: update #? Update build dependencies to a newer patch or minor release
update:
	$(GO) get -u ./...
	$(GO) mod tidy
	$(GO) mod verify

.PHONY: clean #? Remove all files generated by builds
clean:
	rm -f ./build/turret

.PHONY: help #? Describe all targets documented in the Makefile
help:
	@awk --posix --exec ./hack/make_help.awk ./Makefile
